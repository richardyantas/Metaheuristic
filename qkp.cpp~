#include <math.h>
#include <time.h>
#include <algorithm>
#include <vector>
#include <fstream>
#include <limits.h>
#include <iostream>

#define pb push_back

#if defined(__linux) || defined(__linux__)
	unsigned int seed = time(NULL);
	#define RND ((double)rand_r(&seed)/RAND_MAX)
#endif

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__)
	#define RND ((double)rand()/RAND_MAX) 
#endif

using namespace std;

struct chromo {
    bool* items;
	int f;	
	int dimc;
	chromo(int _dimc) { items = new bool[_dimc];dimc=_dimc; }
	~chromo() {	items = NULL; }
	void mutate(const int dimc, const int count){
		int mi;
		for(int i=0;i<count;i++){
			mi = (int)(round(RND*(dimc-1)));
			items[mi] = !items[mi];
		}
	}	
	void printchromo(){
	    for(int i=0;i<dimc;i++){
	        printf("%d ",items[i]);   
	    }	    
	    printf("\n");
	}
};

int fitness(bool*& x, const int dimc, const vector<int>& v, const vector<int>& w, const int vv[1000][1000], const int limit){
	int fit = 0, wsum = 0;
	for(int i=0;i<dimc;i++)
	{
	    fit += x[i]*v[i];
	    wsum += x[i]*w[i];
	    for(int j=i+1;j<=dimc;j++)
	    {    		
	    	fit += x[i]*x[j]*vv[i][j];
	    }
	}
	if(wsum>limit) fit -= 7*(wsum-limit); 
	return fit; 
}

void crossover1p(const chromo& c1, const chromo& c2, const chromo& c3, const int dimc, const int cp) {
	for(int i=0;i<dimc;i++) {
		if(i<cp) { c3.items[i] = c1.items[i]; }
		else { c3.items[i] = c2.items[i]; }
	}
}

void crossover1p_b(const chromo &c1	, const chromo &c2, const chromo &c3, int dimc, int cp) {
	for(int i=0;i<dimc;i++) {
		if(i>=cp) { c3.items[i] = c1.items[i]; }
		else { c3.items[i] = c2.items[i]; }
	}
}

void crossoverrand(const chromo &c1, const chromo &c2, const chromo &c3, const int dimc) {
	for(int i=0;i<dimc;i++) {
		if(round(RND)) { c3.items[i] = c1.items[i]; }
		else { c3.items[i] = c2.items[i]; }
	}
}

void crossoverarit(const chromo &c1, const chromo &c2, const chromo &c3, int dimc) {
	for(int i=0;i<dimc;i++) {
		c3.items[i] = (c1.items[i]^c2.items[i]);
	}
}

bool cfit(const chromo &c1,const chromo &c2) { return c1.f > c2.f; }
bool cmpfun(const std::pair<int,double> &r1, const std::pair<int,double> &r2) { return r1.second > r2.second; }

int coin(const double crp) {
	if(RND<crp) return 1; // se realiza el crossover
	else return 0; // Se realiza la mutacion
}

// Se inicializa los cromosomas con los resultados obtenidos del algoritmo greedy
void initpopg(bool**& c, const std::vector<int> &w, const std::vector<int> &v, const int dimw, const int limit, const int pop){
	std::vector<std::pair<int,double> > rvals(dimw);
	std::vector<int> index(dimw,0);
	for(int i=0;i<dimw;i++){
		rvals.push_back(std::pair<int,double>(std::make_pair(i,(double)v[i]/(double)w[i])));
	}
	std::sort(rvals.begin(),rvals.end(),cmpfun);
	int currentw = 0, k;
	for(int i=0;i<dimw;i++){
		k = rvals[i].first;
		if(currentw + w[k] <= limit) { 
			currentw += w[k];
			index[k] = 1;
		}
	}
	for(int i=0;i<pop;i++){
		for(int j=0;j<dimw;j++){
			c[i][j] = index[j];
		}
	}
}

int main() {
/*
    10
    91 78 22 4 48 85 46 81 3 26 
    55 23 35 44 5 91 95 26 40 
    92 11 20 43 71 83 27 65 
    7 57 33 38 57 63 82 
    100 87 91 83 44 48 
    69 57 79 89 21 
    9 40 22 26
    50 6 7 
    71 52 
    17
    34 33 12 3 43 26 10 2 48 39
*/
	printf("\n");
	srand(time(NULL));
	vector<int> w, v; // items weights and values
	int info=0;
	FILE *f = fopen("in.txt","r");
	
	int N;	
	scanf("%d",&N);	
	int var,vv[1000][1000];
	
	for(int i=0;i<N;i++)
	{
	    scanf("%d",&var);
	    v.pb(var);
	}
	
	for(int i=0;i<N-1;i++)
	{
	    for(int j=i+1;j<N;j++)
	    {	        
	        //printf(".");
	        scanf("%d",&vv[i][j]);
	    }
	}
	
	for(int i=0;i<N;i++)
	{
	    scanf("%d",&var);
	    w.pb(var);
	}
			
			
			
	for(int i=0;i<N-1;i++)
	{
	    for(int j=i+1;j<N;j++)
	    {	        
	        printf("%d ",vv[i][j]);
	    }
	    printf("\n");
	}	 
	
	const int limit = 669; // peso limite 
	const int pop = 100; // tamaÃ±o de la poblacion de cromosomas                             
	const int gens = 1000;//INT_MAX; // maximo numero de generaciones
	const int disc = (int)(ceil(pop*0.8)); // cromosomas descartados por elitismo
	const int dimw = w.size();
	int best = 0, ind = 0, ind2 = 0; 
	int parc = 0; // indice del padre para el crossover
	double avg = 0, crp = 0.7; // probabilidad para realizar el crossover valir crp = 0.35 cambiado a 0.7	
	vector<chromo> ch(pop,chromo(dimw));
	bool **c = new bool*[pop];
	for(int i=0;i<pop;i++) c[i] = new bool[dimw];
	clock_t start = clock();
	printf("Initializing population with a greedy algorithm...");
	initpopg(c,w,v,dimw,limit,pop);
	printf("Done!");
	for(int i=0;i<pop;i++) {
		ch[i].items = c[i];
		ch[i].f = fitness(ch[i].items, dimw ,v, w, vv, limit);
	}
	printf("\n\n");

	for(int p=0;p<gens;p++) {
		std::sort(ch.begin(), ch.end(), cfit);
		//#pragma omp parallel for shared(ch)
		for(int i=0;i<pop;i++) {
			if(i>pop-disc) { // ELitismo - solo se procesa los cromosomas descartados 
				if(coin(crp)==1) { // seccion del crossover
					ind = parc+round(10*RND); // Se elije los padres para el crossover
					ind2 = parc+1+round(10*RND); // RND(aleatoridad) es irrelevante - se hizo la prueba con 0.9
					// Tipos de crossover analizados 
					//crossover1p(ch[ind%pop],ch[ind2%pop],ch[i],dimw,round(RND*(dimw-1))); // antes
					crossover1p(ch[ind%pop],ch[ind2%pop],ch[i],dimw,0.9); 
					//crossoverrand(ch[ind],ch[ind2],ch[i],dimw);
					//crossoverarit(ch[0],ch[1],ch[i],dimw);
					ch[i].f = fitness(ch[i].items, dimw ,v ,w ,vv ,limit);
					parc += 1;
				}
				else { // seccion de la mutacion
					ch[i].mutate(dimw,1);
					ch[i].f = fitness(ch[i].items, dimw ,v, w,vv, limit);
				}
			}
			avg += ch[i].f;
			if(ch[i].f>best){
			    best=ch[i].f;
			    //for(int i=0;i<pop;i++)ch[i].printchromo();
			    
			}						
			//cin.get();
		}

        
   		parc = 0;
		if(p%5==0){
			printf("\n#%d\t",p);
			printf("best fitness: %d \t",best);
			printf("avg fitness: %f",avg/pop);
			if(best >= 52381) goto end;
		}
		best = avg = 0;
	}

end:
	printf("\n\n");
	clock_t end = clock();
	double t = (double)(end-start)/CLOCKS_PER_SEC;
	printf("\nCompletion time: %fs.\n",t);
	return 0;
}
